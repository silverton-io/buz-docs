"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8535],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(a),u=i,h=c["".concat(l,".").concat(u)]||c[u]||m[u]||r;return a?n.createElement(h,o(o({ref:t},d),{},{components:a})):n.createElement(h,o({ref:t},d))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=c;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var s=2;s<r;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},2281:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:3},o="Pixel",p={unversionedId:"inputs/buz/pixel",id:"inputs/buz/pixel",title:"Pixel",description:"\ud83d\udfe2 Supported",source:"@site/docs/inputs/buz/pixel.md",sourceDirName:"inputs/buz",slug:"/inputs/buz/pixel",permalink:"/inputs/buz/pixel",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Webhook",permalink:"/inputs/buz/webhook"},next:{title:"CDC",permalink:"/inputs/buz/cdc"}},l={},s=[{value:"Collection Method",id:"collection-method",level:2},{value:"Parameter Payloads",id:"parameter-payloads",level:3},{value:"Base64 Encoded Parameter Payloads",id:"base64-encoded-parameter-payloads",level:3},{value:"Namespace Method",id:"namespace-method",level:2},{value:"Arbitrary Pixels",id:"arbitrary-pixels",level:3},{value:"Named Pixels",id:"named-pixels",level:3},{value:"Validation Method",id:"validation-method",level:2},{value:"Sample Pixel Configuration",id:"sample-pixel-configuration",level:2}],d={toc:s};function m(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pixel"},"Pixel"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83d\udfe2 Supported")),(0,i.kt)("h2",{id:"collection-method"},"Collection Method"),(0,i.kt)("h3",{id:"parameter-payloads"},"Parameter Payloads"),(0,i.kt)("p",null,"Buz supports collecting payloads via url query params."),(0,i.kt)("p",null,"This method of data collection has drawbacks such as ",(0,i.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/812925/what-is-the-maximum-possible-length-of-a-query-string"},"max uri lengths"),", but is very straight-forward to get started with."),(0,i.kt)("admonition",{title:"For Example",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If ",(0,i.kt)("inlineCode",{parentName:"p"},"/pxl")," is configured as a pixel input, submitting a ",(0,i.kt)("inlineCode",{parentName:"p"},"GET")," request to ",(0,i.kt)("inlineCode",{parentName:"p"},"/pxl/?hello=world&userId=10")," will send a payload of ",(0,i.kt)("inlineCode",{parentName:"p"},'{"hello": "world", "userId": "10"}')," to the configured sinks."),(0,i.kt)("p",{parentName:"admonition"},"No sdk's necessary.")),(0,i.kt)("h3",{id:"base64-encoded-parameter-payloads"},"Base64 Encoded Parameter Payloads"),(0,i.kt)("p",null,'The Buz pixel input supports a "special" query param, ',(0,i.kt)("inlineCode",{parentName:"p"},"hbp"),", by which b64 encoded payloads can be collected."),(0,i.kt)("admonition",{title:"For Example",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If Buz is configured with a pixel path of ",(0,i.kt)("inlineCode",{parentName:"p"},"/pxl")," (the default), submitting a ",(0,i.kt)("inlineCode",{parentName:"p"},"GET")," request to ",(0,i.kt)("inlineCode",{parentName:"p"},"/pxl?hbp=eyJoZWxsbyI6IndvcmxkIn0")," will send a payload of ",(0,i.kt)("inlineCode",{parentName:"p"},'{"hello":"world"}')," to the configured sinks.")),(0,i.kt)("h2",{id:"namespace-method"},"Namespace Method"),(0,i.kt)("p",null,"Buz supports two ways of namespacing pixel payloads: ",(0,i.kt)("inlineCode",{parentName:"p"},"arbitrary")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"named"),"."),(0,i.kt)("h3",{id:"arbitrary-pixels"},"Arbitrary Pixels"),(0,i.kt)("p",null,"Any requests sent to the configured root pixel path are considered ",(0,i.kt)("inlineCode",{parentName:"p"},"arbitrary")," and are assigned a single namespace of ",(0,i.kt)("inlineCode",{parentName:"p"},"buz.pixel.arbitrary"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"/pxl")," is the default root pixel path.")),(0,i.kt)("admonition",{title:"For Example",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If Buz is configured with a pixel path of ",(0,i.kt)("inlineCode",{parentName:"p"},"/pxl")," (the default), all requests to ",(0,i.kt)("inlineCode",{parentName:"p"},"/pxl")," ",(0,i.kt)("strong",{parentName:"p"},"will not be validated")," and will be namespaced according to ",(0,i.kt)("inlineCode",{parentName:"p"},"buz.pixel.arbitrary"),".")),(0,i.kt)("admonition",{title:"Yo",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Since this method is basically a catchall it should be used sparingly.")),(0,i.kt)("h3",{id:"named-pixels"},"Named Pixels"),(0,i.kt)("p",null,"Any requests sent to a schema-specific pixel path are ",(0,i.kt)("strong",{parentName:"p"},"namespaced according to the associated schema"),"."),(0,i.kt)("admonition",{title:"For Example",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If Buz is configured with a pixel path of ",(0,i.kt)("inlineCode",{parentName:"p"},"/pxl")," (the default), all requests to ",(0,i.kt)("inlineCode",{parentName:"p"},"/pxl/io.silverton/someschema/v1.0.json")," will be validated and namespaced according to the contents of the ",(0,i.kt)("inlineCode",{parentName:"p"},"io.silverton/someschema/v1.0.json")," schema.")),(0,i.kt)("admonition",{title:"Pro tip",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Named pixels are the better way to go. Especially when payloads are base64 encoded so properties can have non-string types.")),(0,i.kt)("h2",{id:"validation-method"},"Validation Method"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arbitrary pixels:"),"  Not validated."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Named pixels with string query params:")," Validated according to the associated schema. ",(0,i.kt)("em",{parentName:"p"},"But all schema properties must be of type ",(0,i.kt)("inlineCode",{parentName:"em"},"string"))," \ud83d\udc4e."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Named pixels with the ",(0,i.kt)("inlineCode",{parentName:"strong"},"hbp")," b64-encoded query param:")," Validated according to the associated schema. ",(0,i.kt)("em",{parentName:"p"},"Schema properties can be of any type")," \ud83d\udc4d."),(0,i.kt)("h2",{id:"sample-pixel-configuration"},"Sample Pixel Configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"inputs:\n  pixel:\n    enabled: true     # Whether or not to enable pixels\n    path: /pxl        # Root path for incoming pixels\n")))}m.isMDXComponent=!0}}]);